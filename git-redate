#!/bin/bash

set -e

assert_git_repo(){
	if ! git rev-parse --show-toplevel > /dev/null 2>&1
	then
		echo "$0: not a git repo" >&2
		exit 1
	fi
}

usage(){
	echo >&2 "Usage: $0 -N"
	echo >&2 "N: commit count to redate"
	exit 2
}

if test $# -ne 1
then usage
fi
if ! echo "$1" | grep '^-' >/dev/null
then usage
fi
n="${1#-}"

assert_git_repo

tmpfile=$(mktemp "${TMPDIR:-/tmp}/gitredate-XXXXXXXX")
if ! test -e "$tmpfile"
then
	echo >&2 "$0: mktemp failed"
	exit 1
fi
trap "rm -f '$tmpfile'" EXIT

datefmt=%cI
if test "$(git log -n1 --pretty=format:"$datefmt")" = "$datefmt"
then datefmt=%ci
fi

git log -n $n --pretty=format:"$datefmt | %H | %s" > "$tmpfile"
if test $n -eq 1
then echo >>"$tmpfile"
fi

${VISUAL:-${EDITOR:-vi}} "$tmpfile"

ENVFILTER=$(
while read commit
do
	IFS="|" read date hash message <<!
$commit
!
	if test "$date" = now
	then date=$(date +%Y-%m-%dT%H:%M:%S%z)
	fi

	if test "$datefmt" == "%cI"
	then DATE_NO_SPACE="$(echo "$date" | tr -d '[[:space:]]')"
	else DATE_NO_SPACE="$(echo "$date")"
	fi

		cat <<!
if test \$GIT_COMMIT = $hash
then
	export GIT_AUTHOR_DATE="$DATE_NO_SPACE"
	export GIT_COMMITTER_DATE="$DATE_NO_SPACE"
fi
!
done < "$tmpfile"
)

git filter-branch -f --env-filter "$ENVFILTER" HEAD~$n..HEAD
